// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
const urlParams = new URLSearchParams(window.location.search);
const firstName = urlParams.get('firstName') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
const hash = urlParams.get('hash') || 'xxxxyyyy';

// –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const userNameEl = document.getElementById('user-name');
const lockStatusEl = document.getElementById('lock-status');
const actionBtn = document.getElementById('action-btn');
const nfcHintEl = document.getElementById('nfc-hint');
const hashEl = document.getElementById('connection-hash');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–º–∫–∞
let isLocked = true;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
userNameEl.textContent = `–ü—Ä–∏–≤–µ—Ç, ${firstName}!`;
hashEl.textContent = hash;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
actionBtn.addEventListener('click', () => {
    if (isLocked) {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        isLocked = false;
        actionBtn.textContent = '–û—Ç–∫—Ä—ã—Ç—å';
        actionBtn.classList.add('active');
        lockStatusEl.textContent = 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
        nfcHintEl.textContent = '–ì–æ—Ç–æ–≤ –∫ NFC';
        
        // –≠–º—É–ª—è—Ü–∏—è NFC (—Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Web NFC API)
        setTimeout(() => {
            nfcHintEl.textContent = '–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω!';
        }, 800);
    } else {
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        isLocked = true;
        actionBtn.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
        actionBtn.classList.remove('active');
        lockStatusEl.textContent = 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
        nfcHintEl.textContent = '–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ –∑–∞–º–∫—É';
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞)
if (urlParams.has('firstName')) {
    const userData = {
        name: firstName,
        tgId: tg.initDataUnsafe.user?.id || "unknown",
        hash: hash
    };
    
    fetch('http://192.168.1.128:5001/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
    }).catch(() => { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ */ });
}